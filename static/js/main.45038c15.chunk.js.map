{"version":3,"sources":["components/forms/UserForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["UserForm","props","email_pattern","password_pattern","lowercase_pattern","uppercase_pattern","digit_pattern","special_pattern","className","initialValues","email","password","validate","values","errors","test","onSubmit","setSubmitting","resetForm","setTimeout","alert","JSON","stringify","isSubmitting","type","name","placeholder","component","disabled","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAIqBA,G,wDAClB,WAAYC,GAAQ,uCACXA,G,qDAKN,IAAMC,EAAgB,2CAChBC,EAAmB,oEACnBC,EAAoB,gBACpBC,EAAoB,gBACpBC,EAAgB,iBAChBC,EAAkB,wBAExB,OACG,sBAAKC,UAAU,eAAf,UACG,8CACA,cAAC,IAAD,CACGC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAAU,SAAAC,GACP,IAAIC,EAAS,GA4Bb,OA3BKD,EAAOH,MAGAR,EAAca,KAAKF,EAAOH,SACnCI,EAAOJ,MAAQ,0BAHfI,EAAOJ,MAAQ,qBAMbG,EAAOF,SAGAP,EAAkBW,KAAKF,EAAOF,UAG9BN,EAAkBU,KAAKF,EAAOF,UAG9BL,EAAcS,KAAKF,EAAOF,UAG1BJ,EAAgBQ,KAAKF,EAAOF,UAG5BR,EAAiBY,KAAKF,EAAOF,YACtCG,EAAOH,SAAW,6CAHlBG,EAAOH,SAAP,qDAHAG,EAAOH,SAAW,wCAHlBG,EAAOH,SAAW,6CAHlBG,EAAOH,SAAW,4CAHlBG,EAAOH,SAAW,wBAmBdG,GAEVE,SAAU,SAACH,EAAD,GAA2C,IAAhCI,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACjCC,YAAW,WACRC,MAAMC,KAAKC,UAAUT,EAAQ,KAAM,IACnCK,EAAU,IACVD,GAAc,KACd,MAtCT,SAyCI,gBAAGM,EAAH,EAAGA,aAAH,OACE,eAAC,IAAD,WACG,gCACG,cAAC,IAAD,CACGC,KAAK,QACLC,KAAK,QACLC,YAAY,kBAEf,cAAC,IAAD,CAAcD,KAAK,QAAQE,UAAU,YAExC,gCACG,cAAC,IAAD,CACGH,KAAK,WACLC,KAAK,WACLC,YAAY,aAEf,cAAC,IAAD,CAAcD,KAAK,WAAWE,UAAU,YAE3C,wBAAQH,KAAK,SAASI,SAAUL,EAAhC,iC,GA5EiBM,cCCjBC,G,6KAEjB,OACE,qBAAKtB,UAAU,SAAf,SACE,cAAC,EAAD,U,GAJyBqB,cCOlBE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.45038c15.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\r\nimport './UserForm.css';\r\n\r\nexport default class UserForm extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n\r\n   }\r\n\r\n   render() {\r\n      const email_pattern = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\r\n      const password_pattern = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[-+_!@#$%^&*?]).{8,}$/i;\r\n      const lowercase_pattern = /^(?=.*[a-z])/g;\r\n      const uppercase_pattern = /^(?=.*[A-Z])/g;\r\n      const digit_pattern = /^(?=.*\\d{1,})/g;\r\n      const special_pattern = /(?=.*[-+_!@#$%^&*?])/g;\r\n   \r\n      return (\r\n         <div className='contact-form'>\r\n            <h2>Sign Up Form</h2>\r\n            <Formik\r\n               initialValues={{ email: '', password: '' }}\r\n               validate={values => {\r\n                  let errors = {};\r\n                  if (!values.email) {\r\n                     errors.email = 'Email is required!';\r\n\r\n                  } else if (!email_pattern.test(values.email)) {\r\n                     errors.email = 'Invalid email address!';\r\n                  }\r\n\r\n                  if (!values.password) {\r\n                     errors.password = 'Password is required!';\r\n\r\n                  } else if (!lowercase_pattern.test(values.password)) {\r\n                     errors.password = 'Password must have a lowercase character!';\r\n\r\n                  } else if (!uppercase_pattern.test(values.password)) {\r\n                     errors.password = 'Password must have an uppercase character!';\r\n\r\n                  } else if (!digit_pattern.test(values.password)) {\r\n                     errors.password = 'Password must have a digit character!';\r\n\r\n                  } else if (!special_pattern.test(values.password)) {\r\n                     errors.password = `Password must include at least one: '-+_!@#$%^&*?'`;\r\n\r\n                  } else if (!password_pattern.test(values.password)) {\r\n                     errors.password = 'Password must have at least 8 characters!';\r\n\r\n                  }\r\n\r\n                  return errors;\r\n               }}\r\n               onSubmit={(values, { setSubmitting, resetForm }) => {\r\n                  setTimeout(() => {\r\n                     alert(JSON.stringify(values, null, 2));\r\n                     resetForm({});\r\n                     setSubmitting(false);\r\n                  }, 500);\r\n               }}\r\n            >\r\n               {({ isSubmitting }) => (\r\n                  <Form>\r\n                     <div>\r\n                        <Field\r\n                           type='email'\r\n                           name='email'\r\n                           placeholder='email address'\r\n                        />\r\n                        <ErrorMessage name='email' component='span' />\r\n                     </div>\r\n                     <div>\r\n                        <Field\r\n                           type='password'\r\n                           name='password'\r\n                           placeholder='password'\r\n                        />\r\n                        <ErrorMessage name='password' component='span' />\r\n                     </div>\r\n                     <button type='submit' disabled={isSubmitting}>\r\n                        Submit\r\n                     </button>\r\n                  </Form>\r\n               )}\r\n            </Formik>\r\n         </div >\r\n      );\r\n   };\r\n};\r\n","import React, { Component } from 'react';\nimport UserForm from './components/forms/UserForm';\nimport './App.css';\n\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className='center'>\n        <UserForm />\n      </div>\n    );\n  };\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}